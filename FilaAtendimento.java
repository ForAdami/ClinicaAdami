public class FilaAtendimento {
    private Paciente[] fila;  // Vetor para armazenar os pacientes
    private int tamanho;      // N√∫mero de pacientes na fila
    private int inicio;       // √çndice do primeiro paciente na fila
    private int fim;          // √çndice onde o pr√≥ximo paciente ser√° inserido
    private String[] historico;  // Vetor para armazenar o hist√≥rico de opera√ß√µes
    private int historicoTamanho;  // Quantidade de opera√ß√µes registradas no hist√≥rico

    // ‚úÖ Construtor que inicializa a fila de atendimento
    public FilaAtendimento(int capacidade) {
        fila = new Paciente[capacidade];   // Cria a fila com o tamanho fornecido
        historico = new String[capacidade]; // Cria o vetor para armazenar hist√≥rico
        tamanho = 0;   // Inicializa a fila vazia
        inicio = 0;    // O primeiro paciente estar√° no √≠ndice 0
        fim = 0;       // O pr√≥ximo paciente ser√° inserido no √≠ndice 0
        historicoTamanho = 0;  // Hist√≥rico come√ßa vazio
    }

    // ‚úÖ M√©todo para adicionar um paciente √† fila com prioridade
    public void entrarNaFila(Paciente p) {
        if (tamanho >= fila.length) {  // Verifica se a fila est√° cheia
            System.out.println("Fila cheia! N√£o √© poss√≠vel adicionar o paciente.");
            return;
        }

        // üîπ Se a fila estiver vazia, apenas adiciona o paciente normalmente
        if (tamanho == 0) {
            fila[fim] = p;  // Adiciona o primeiro paciente
        } else {
            // üîπ Encontrar a posi√ß√£o correta para inserir baseado na prioridade
            int posicaoInsercao = fim; // Inicialmente, a posi√ß√£o √© o √∫ltimo √≠ndice
            int i = tamanho;  // Come√ßamos a verificar a partir do √∫ltimo paciente

            while (i > 0) {  // Percorre os elementos de tr√°s para frente
                int posicaoAnterior = (inicio + i - 1) % fila.length; // √çndice do paciente anterior
                Paciente pacienteAnterior = fila[posicaoAnterior]; // Pega o paciente na posi√ß√£o

                // üî• Se o novo paciente tem prioridade maior, deslocamos os outros para frente
                if (p.isEmergencia() ||
                        (p.getIdade() >= 60 && !pacienteAnterior.isEmergencia())) {
                    fila[posicaoInsercao] = pacienteAnterior; // Desloca o paciente para frente
                    posicaoInsercao = posicaoAnterior; // Atualiza posi√ß√£o para inserir o novo paciente
                } else {
                    break; // Sai do loop quando encontra a posi√ß√£o correta
                }
                i--; // Decrementa o √≠ndice para continuar percorrendo a fila
            }

            // üîπ Insere o paciente na posi√ß√£o correta da fila
            fila[posicaoInsercao] = p;
        }

        // Atualiza os √≠ndices da fila
        fim = (fim + 1) % fila.length; // Atualiza o √≠ndice de fim (fila circular)
        tamanho++; // Aumenta o tamanho da fila
        registrarHistorico(p.getNome(), "ENTRADA"); // Registra a opera√ß√£o no hist√≥rico
    }

    // ‚úÖ M√©todo para chamar um paciente da fila
    public Paciente chamarPaciente() {
        if (tamanho == 0) {  // Se a fila estiver vazia, n√£o h√° ningu√©m para chamar
            System.out.println("N√£o h√° pacientes na fila.");
            return null;
        }
        Paciente p = fila[inicio];  // Pega o paciente que est√° na primeira posi√ß√£o (prioridade)
        inicio = (inicio + 1) % fila.length; // Atualiza o √≠ndice de in√≠cio (fila circular)
        tamanho--; // Reduz o n√∫mero de pacientes na fila
        registrarHistorico(p.getNome(), "CHAMADO"); // Registra a opera√ß√£o no hist√≥rico
        return p;  // Retorna o paciente chamado
    }

    // ‚úÖ M√©todo para exibir todos os pacientes da fila
    public void exibirFila() {
        if (tamanho == 0) {  // Verifica se a fila est√° vazia
            System.out.println("Nenhum paciente na fila.");
            return;
        }
        System.out.println("\n--- Pacientes na Fila de Atendimento ---");
        for (int i = 0; i < tamanho; i++) {
            int posicao = (inicio + i) % fila.length;  // Calcula a posi√ß√£o correta na fila circular
            Paciente p = fila[posicao];  // Obt√©m o paciente na posi√ß√£o calculada
            String tipoAtendimento = p.isEmergencia() ? "üö® Emerg√™ncia" :
                    (p.getIdade() >= 60 ? "üë¥ Prioridade" : "Paciente comum"); // Define a prioridade
            System.out.println((i + 1) + ". " + p.getNome() + " (Idade: " + p.getIdade() + ") - " + tipoAtendimento);
        }
    }

    // ‚úÖ M√©todo para registrar opera√ß√µes no hist√≥rico
    private void registrarHistorico(String nomePaciente, String operacao) {
        if (historicoTamanho < historico.length) { // Se o hist√≥rico n√£o estiver cheio
            historico[historicoTamanho] = "Paciente: " + nomePaciente + " - Opera√ß√£o: " + operacao; // Salva a opera√ß√£o
            historicoTamanho++; // Incrementa o n√∫mero de opera√ß√µes registradas
        }
    }

    // ‚úÖ M√©todo para exibir o hist√≥rico de opera√ß√µes realizadas
    public void exibirHistorico() {
        if (historicoTamanho == 0) { // Se n√£o houver registros
            System.out.println("Nenhuma opera√ß√£o no hist√≥rico.");
        } else {
            System.out.println("\n--- Hist√≥rico de Opera√ß√µes ---");
            for (int i = 0; i < historicoTamanho; i++) {
                System.out.println((i + 1) + ". " + historico[i]); // Exibe cada opera√ß√£o registrada
            }
        }
    }
}

